name: Build and Upload RPM (AlmaLinux 8 and 9)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
jobs:
  build-rpm:
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        os_version: [8, 9]
    container:
      image: almalinux:${{ matrix.os_version }}

    env:
        GPG_KEY_NAME: "Holoscan Proxy Builder"

    steps:
    - name: Install build dependencies
      run: |
        dnf -y groupinstall "Development Tools"
        dnf -y install epel-release dnf-plugins-core
        dnf config-manager --set-enabled powertools || dnf config-manager --set-enabled crb
        dnf makecache
        dnf -y install redhat-rpm-config rpm-build \
          rpmdevtools git tar cmake \
          gcc-toolset-12 make rpmlint which \
          zeromq-devel yaml-cpp-devel \
          elfutils elfutils-debuginfod elfutils-libelf-devel \
          debugedit dwz systemd gnupg2

    - name: Build and install cppzmq from source
      run: |
        git clone https://github.com/zeromq/cppzmq.git /tmp/cppzmq
        cd /tmp/cppzmq
        cmake .
        make -j$(nproc)
        make install
        ldconfig

    - name: Add build user and setup RPM env
      run: |
        useradd builder || true
        mkdir -p /home/builder/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        chown -R builder:builder /home/builder
        echo '%_topdir /home/builder/rpmbuild' > /home/builder/.rpmmacros

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version from latest Git tag
      id: get_version
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"
        git fetch --tags
        VERSION=$(git describe --tags --abbrev=0)
        echo "Using version: $VERSION"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Create source tarball and copy spec
      run: |
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

        VERSION=${{ steps.get_version.outputs.version }}
        ARCHIVE=holoscan-proxy-${VERSION}.tar.gz
        git archive --format=tar.gz --prefix=holoscan-proxy-${VERSION}/ HEAD -o $ARCHIVE

        sed -i "s/^Version:.*/Version:        ${VERSION}/" packaging/holoscan-proxy.spec

        cp packaging/holoscan-proxy.spec /home/builder/rpmbuild/SPECS/
        mv $ARCHIVE /home/builder/rpmbuild/SOURCES/
        chown -R builder:builder /home/builder/rpmbuild

    - name: Import GPG private key
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        gpg --list-keys

    - name: Configure RPM
      run: |
        echo '%_gpg_name SEHER KARAKUZU <KARAKUZU.SEHER@GMAIL.COM>' >> /home/builder/.rpmmacros
        chown builder:builder /home/builder/.rpmmacros


    - name: Build the RPM with GCC Toolset enabled
      run: |
        su - builder -c "source /opt/rh/gcc-toolset-12/enable && rpmbuild -ba /home/builder/rpmbuild/SPECS/holoscan-proxy.spec"

    - name: Import GPG private key as builder
      run: |
        mkdir -p /home/builder/.gnupg
        echo "${{ secrets.GPG_PRIVATE_KEY }}" > /home/builder/private.key
        chown -R builder:builder /home/builder
        chmod 600 /home/builder/private.key
        su - builder -c "gpg --batch --import ~/private.key"
        rm -f /home/builder/private.key

    - name: Fix GPG permissions
      run: |
        chmod 700 /home/builder/.gnupg
        chown -R builder:builder /home/builder/.gnupg
 

    - name: Sign the RPM packages
      run: |
        su - builder -c 'source /opt/rh/gcc-toolset-12/enable && \
        find ~/rpmbuild/RPMS -name "*.rpm" -exec rpm --addsign {} \;'

    - name: Check debug extractor and tools
      run: |
        ls -l /usr/lib/rpm/find-debuginfo.sh
        which eu-strip
        which gdb
        echo "RPM version:"
        rpm --version

    - name: List built RPMs and debug info
      run: |
        echo "RPM files:"
        find /home/builder/rpmbuild/RPMS -name "*.rpm"

        echo "Debug RPMs:"
        find /home/builder/rpmbuild/RPMS -name "*debuginfo*.rpm"

        echo "Buildroot contents:"
        ls -lR /home/builder/rpmbuild/BUILDROOT

    - name: Upload RPM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: rpm-package-${{ matrix.os_version }}
        path: /home/builder/rpmbuild/RPMS/**/*.rpm

  upload-release:
    needs: build-rpm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Ensure this only runs on tag pushes

    steps:
    - name: Download all RPM and GPG key from builds
      uses: actions/download-artifact@v4
      with:
        path: downloaded-rpms

    - name: Save public GPG key to file
      run: |
        echo "${{ secrets.GPG_PUBLIC_KEY }}" > RPM-GPG-KEY-HOLOSCAN
      shell: bash

    - name: List downloaded RPMs
      run: find downloaded-rpms -name "*.rpm"

    - name: Upload RPMs to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          downloaded-rpms/**/*.rpm
          RPM-GPG-KEY-HOLOSCAN
